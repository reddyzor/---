import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from giga_recomendation import MeetingAnalyzer
from competency_analyzer import analyze_competencies_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8079592721:AAGLaX7LwUPX0X5fr1SK-9IQnSvfP3Z96ws"
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_files = State()
    waiting_for_trans_file = State()
    waiting_for_triggers_file = State()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤—Å—Ç—Ä–µ—á
AUTH_KEY = 'ZGMzMGJmZjEtODQwYS00ZjAwLWI2NjgtNGIyNGNiY2ViNmE1OjYwNjM3NTU0LWQxMDctNDA5ZS1hZWM3LTAwYjQ5MjZkOGU2OA=='
SCOPE = 'GIGACHAT_API_PERS'
API_AUTH_URL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth'
API_CHAT_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions'

meeting_analyzer = MeetingAnalyzer(AUTH_KEY, SCOPE, API_AUTH_URL, API_CHAT_URL)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_files = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", callback_data="analyze_competencies")],
        [InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á!\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "analyze_competencies")
async def analyze_competencies_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π'"""
    await state.set_state(UserStates.waiting_for_files)
    user_id = callback.from_user.id
    user_folder = f"temp_files/{user_id}"
    if os.path.exists(user_folder):
        import shutil
        shutil.rmtree(user_folder)
    os.makedirs(user_folder, exist_ok=True)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_operation")]
    ])
    await callback.message.answer(
        "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞:\n"
        "1. –§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏ (trans.docx)\n"
        "2. –§–∞–π–ª —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ (triggers.xlsx)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É.\n\n"
        "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "get_recommendations")
async def get_recommendations_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'"""
    if not os.path.exists('REPORT.txt'):
        await callback.message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π!\n\n"
            "üìä –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π' –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ trans.docx (—Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏)\n"
            "‚Ä¢ triggers.xlsx (—Ç—Ä–∏–≥–≥–µ—Ä—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π)\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        )
        await callback.answer()
        return

    user_id = callback.from_user.id
    user_folder = f"temp_files/{user_id}"
    trans_file_path = f"{user_folder}/trans.docx"
    if os.path.exists(trans_file_path):
        await callback.message.answer("‚úÖ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
        try:
            analysis_result = meeting_analyzer.analyze_meeting_with_file(trans_file_path)
            if analysis_result.startswith("‚ùå"):
                await callback.message.answer(analysis_result)
                os.remove(trans_file_path)
                await state.clear()
                return
            recommendations_filename = f"detailed_recommendations_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(recommendations_filename, 'w', encoding='utf-8') as f:
                f.write(analysis_result)
            with open(recommendations_filename, 'rb') as f:
                await callback.message.answer_document(
                    types.BufferedInputFile(f.read(), filename=recommendations_filename),
                    caption="üí° –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π\n\nüìä –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞:\n‚Ä¢ –¢–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏\n‚Ä¢ –û—Ç—á–µ—Ç–µ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º"
                )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_main")]
            ])
            await callback.message.answer("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            os.remove(trans_file_path)
            await state.clear()
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            os.remove(trans_file_path)
            await state.clear()
        return

    await state.set_state(UserStates.waiting_for_trans_file)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_operation")]
    ])
    await callback.message.answer(
        "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏ (trans.docx)\n\n"
        "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = """
‚ÑπÔ∏è **–ü–û–ú–û–©–¨ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ë–û–¢–ê**

üìä **–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π:**
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏ (trans.docx)
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ (triggers.xlsx)
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
‚Ä¢ –£–∑–Ω–∞–π—Ç–µ –±–∞–ª–ª—ã –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
‚Ä¢ –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏ (trans.docx)
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü

üìÅ **–§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:**
‚Ä¢ trans.docx - —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
‚Ä¢ triggers.xlsx - Excel —Ñ–∞–π–ª —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π

‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: 20-30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 10-15 —Å–µ–∫—É–Ω–¥

üîß **–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–Ω–æ–≤–æ
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", callback_data="analyze_competencies")],
        [InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á!\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", callback_data="analyze_competencies")],
        [InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

@dp.callback_query(lambda c: c.data == "cancel_operation")
async def cancel_operation_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.message(UserStates.waiting_for_files)
async def handle_files_for_analysis(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"""
    user_id = message.from_user.id
    
    # –û–ß–ò–°–¢–ö–ê temp_files —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ)
    user_folder = f"temp_files/{user_id}"
    if not os.path.exists(user_folder):
        os.makedirs(user_folder, exist_ok=True)

    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    
    file_name = message.document.file_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º docx –∫–∞–∫ trans.docx, xlsx –∫–∞–∫ triggers.xlsx
    if file_name.lower().endswith('.docx'):
        save_name = 'trans.docx'
    elif file_name.lower().endswith('.xlsx'):
        save_name = 'triggers.xlsx'
    else:
        save_name = file_name  # fallback

    file_path = f"{user_folder}/{save_name}"
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    with open(file_path, 'wb') as f:
        f.write(downloaded_file.read())

    if user_id not in user_files:
        user_files[user_id] = {}

    user_files[user_id][save_name] = file_path
    
    await message.answer(f"‚úÖ –§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞
    if len(user_files[user_id]) == 2:
        await analyze_user_files(message, user_id)
        await state.clear()
    else:
        await message.answer("üìÅ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª.")

async def analyze_user_files(message: types.Message, user_id: int):
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        files = user_files[user_id]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã
        trans_file = None
        triggers_file = None
        
        for file_name, file_path in files.items():
            if file_name.endswith('.docx'):
                trans_file = file_path
            elif file_name.endswith('.xlsx'):
                triggers_file = file_path
        
        if not trans_file or not triggers_file:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–∞ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        full_report, summary = await analyze_competencies_async(trans_file, triggers_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        report_filename = f"competency_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(full_report)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
        with open(report_filename, 'rb') as f:
            await message.answer_document(
                types.BufferedInputFile(f.read(), filename=report_filename),
                caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"
            )
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        await message.answer(f"üìã {summary}")

        # –ó–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_main")]
        ])
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        
        # –ù–ï –æ—á–∏—â–∞–µ–º temp_files –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞!
        # cleanup_user_files(user_id)  # <-- –£–ë–†–ê–ù–û
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(error_message)
        # cleanup_user_files(user_id)  # <-- –£–ë–†–ê–ù–û

@dp.message(UserStates.waiting_for_trans_file)
async def handle_trans_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    user_id = message.from_user.id
    
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    
    file_name = message.document.file_name
    if not file_name.endswith('.docx'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx")
        return
    
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_folder = f"temp_files/{user_id}"
    os.makedirs(user_folder, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = f"{user_folder}/{file_name}"
    with open(file_path, 'wb') as f:
        f.write(downloaded_file.read())
    
    await message.answer("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å—Ç—Ä–µ—á—É –∏ –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º...")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É —Å —É—á–µ—Ç–æ–º –æ—Ç—á–µ—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        analysis_result = meeting_analyzer.analyze_meeting_with_file(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–æ–π
        if analysis_result.startswith("‚ùå"):
            await message.answer(analysis_result)
            os.remove(file_path)
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        recommendations_filename = f"detailed_recommendations_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(recommendations_filename, 'w', encoding='utf-8') as f:
            f.write(analysis_result)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        with open(recommendations_filename, 'rb') as f:
            await message.answer_document(
                types.BufferedInputFile(f.read(), filename=recommendations_filename),
                caption="üí° –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π\n\nüìä –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞:\n‚Ä¢ –¢–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏\n‚Ä¢ –û—Ç—á–µ—Ç–µ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_main")]
        ])
        await message.answer("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª
        os.remove(file_path)
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        os.remove(file_path)
        await state.clear()



def cleanup_user_files(user_id):
    """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_files:
        for file_path in user_files[user_id].values():
            try:
                os.remove(file_path)
            except:
                pass
        del user_files[user_id]

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.makedirs("temp_files", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 