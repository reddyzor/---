import pandas as pd
from docx import Document
import os

def analyze_transcript(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
    print(f"=== –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê {file_path} ===")
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        doc = Document(file_path)
        paragraphs = [para.text for para in doc.paragraphs if para.text.strip()]
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤: {len(paragraphs)}")
        print(f"üìä –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(' '.join(paragraphs))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if paragraphs:
            print(f"\nüìù –ü–µ—Ä–≤—ã–µ 3 –∞–±–∑–∞—Ü–∞:")
            for i, para in enumerate(paragraphs[:3]):
                print(f"{i+1}. {para[:100]}{'...' if len(para) > 100 else ''}")
        else:
            print("‚ùå –¢–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def analyze_triggers(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    print(f"\n=== –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê {file_path} ===")
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        df = pd.read_excel(file_path, sheet_name='–õ–∏—Å—Ç1')
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        
        print(f"\nüìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:")
        for i, col in enumerate(df.columns):
            print(f"{i+1}. '{col}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        df.columns = df.columns.str.strip()
        df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è'] = df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è'].ffill()
        df['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)'] = df['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)'].ffill()
        
        print(f"\nüéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
        competencies = df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è'].dropna().unique()
        for i, comp in enumerate(competencies):
            print(f"{i+1}. {comp}")
        
        print(f"\nüìà –ü—Ä–∏–º–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
        first_comp = competencies[0] if len(competencies) > 0 else None
        if first_comp:
            comp_data = df[df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è'] == first_comp]
            
            # –ò—â–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            pos_cols = [col for col in df.columns if '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è' in col]
            neg_cols = [col for col in df.columns if '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è' in col]
            
            print(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {pos_cols}")
            print(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {neg_cols}")
            
            if pos_cols:
                print(f"\n   üìù –ü—Ä–∏–º–µ—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:")
                for i, marker in enumerate(comp_data[pos_cols[0]].dropna().head(3)):
                    if marker and str(marker).strip():
                        print(f"   {i+1}. {marker}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def test_similarity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print(f"\n=== –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
    from difflib import SequenceMatcher
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    test_phrase = "–Ø —Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"
    test_markers = [
        "–ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "–≤—ã—è—Å–Ω—è–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞", 
        "–∞–∫—Ç–∏–≤–Ω–æ —Å–ª—É—à–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞",
        "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞"
    ]
    
    print(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: '{test_phrase}'")
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã:")
    
    for marker in test_markers:
        similarity = SequenceMatcher(None, test_phrase.lower(), marker.lower()).ratio()
        print(f"   '{marker}' ‚Üí {similarity:.3f} ({similarity*100:.1f}%)")

if __name__ == "__main__":
    analyze_transcript('trans.docx')
    analyze_triggers('triggers.xlsx')
    test_similarity() 