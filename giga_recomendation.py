import requests
import json
from datetime import datetime
import os
from docx import Document


class MeetingAnalyzer:
    def __init__(self, auth_key, scope, api_auth_url, api_chat_url):
        self.auth_key = auth_key
        self.scope = scope
        self.api_auth_url = api_auth_url
        self.api_chat_url = api_chat_url
        self.access_token = None
        self.token_expires = 0

    def get_access_token(self):
        headers = {
            'Authorization': f'Bearer {self.auth_key}',
            'RqUID': '6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        data = {'scope': self.scope}

        response = requests.post(self.api_auth_url, headers=headers, data=data, verify=False)
        if response.status_code == 200:
            token_data = response.json()
            self.access_token = token_data['access_token']
            self.token_expires = datetime.now().timestamp() + int(token_data['expires_at'])
            return True
        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
            return False

    def is_token_valid(self):
        return self.access_token and datetime.now().timestamp() < self.token_expires

    def read_docx(self, file_path):
        """–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ .docx"""
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        doc = Document(file_path)
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        return '\n'.join(full_text)

    def analyze_meeting(self):
        if not self.is_token_valid() and not self.get_access_token():
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"

        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            trans = self.read_docx('./trans.docx')
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ò—Ç–æ–≥–∏ –ú–ú

–¢–≤–æ–π –≥–æ–ª–æ—Å –∏ —Ä–µ—á—å –±—ã–ª–∏ [–ø–æ–∑–∏—Ç–∏–≤–Ω—ã/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã], [–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã/—Ö–æ–ª–æ–¥–Ω—ã], [—Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—â–∏–µ –∫ –û–°/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ/–æ—Ç—Ç–∞–ª–∫–∏–≤–∞—é—â–∏–µ]. 
–¢—ã –≤–æ–≤–ª—ë–∫ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ [N] –∏–∑ [M] –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ú–ú–ö. 
–¢—ã [–ø—Ä–æ–ø—É—Å—Ç–∏–ª/–Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª] –≤–∞–∂–Ω—ã–π —ç—Ç–∞–ø - [–Ω–µ –æ–∑–≤—É—á–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ú–ú/–æ–∑–≤—É—á–∏–ª –ø—Ä–∞–≤–∏–ª–∞]/—É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è. 
–í –º–æ–º–µ–Ω—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è [–Ω–µ –æ–∑–≤—É—á–∏–≤–∞–ª–∏—Å—å/–æ–∑–≤—É—á–∏–≤–∞–ª–∏—Å—å] –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞, —ç—Ç–æ [—Ö–æ—Ä–æ—à–æ/–ø–ª–æ—Ö–æ], –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ. 
[–°–æ–±–ª—é–¥—ë–Ω —Ç–∞–π–º–∏–Ω–≥/–ù–µ —Å–æ–±–ª—é–¥—ë–Ω, –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –∫–æ—Ä–æ—á–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏]. 
[–û–¥–∏–Ω/–ù–µ—Å–∫–æ–ª—å–∫–æ/–ù–∏–∫—Ç–æ] –∏–∑ [M] —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ú–ú–ö [–§–ò–û] –ø–æ–≥—Ä—É–∑–∏–ª—Å—è –≤ –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –µ–≥–æ –∑–∞–¥–∞—á–∏ –∏ –ø–ª–∞–Ω—ã. 
–ü—Ä–∏ —ç—Ç–æ–º [–Ω–µ –ø–æ–≥—Ä—É–∑–∏–ª—Å—è/–ø–æ–≥—Ä—É–∑–∏–ª—Å—è] –≤ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–µ —É–∑–Ω–∞–ª –æ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ —Ö–æ–±–±–∏. 
–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–ª–∏–µ–Ω—Ç–µ –∑–∞–¥–∞–≤–∞–ª–∏ [N] –∏–∑ [M] –ú–ú–ö. 
–¢—ã [–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª/–ø—Ä–µ–¥–ª–æ–∂–∏–ª] –∫–æ–º–∞–Ω–¥–µ –ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è, —á—Ç–æ [–Ω–µ –ø–æ–∑–≤–æ–ª–∏–ª–æ/–ø–æ–∑–≤–æ–ª–∏–ª–æ] —Ç–µ–±–µ –≤–æ–≤–ª–µ—á—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. 
–ü—Ä–∏ —ç—Ç–æ–º —Ç–æ–±–æ–π [–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–ª–æ–≤–∞ –ø–∞—Ä–∞–∑–∏—Ç—ã (–±–æ–ª–µ–µ 3 —Ä–∞–∑)/–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ª–æ–≤–∞ –ø–∞—Ä–∞–∑–∏—Ç—ã (–±–æ–ª–µ–µ 3 —Ä–∞–∑)]. 
–¢—ã [–ø–µ—Ä–µ–±–∏–≤–∞–ª/–Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª] —Ä–µ—á—å [–§–ò–û]. 
–í –∏—Ç–æ–≥–µ [—Ä–µ–±—è—Ç–∞ –Ω–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∏–¥–µ—é/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/—Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ–∏ –∏–¥–µ–∏]. 
[–ë—ã–ª–∏/–ù–µ –±—ã–ª–æ] –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è. 
–ü–æ –∏—Ç–æ–≥–∞–º –ú–ú [N] –∏–∑ [M] —Ä–µ–±—è—Ç –Ω–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏. –ò –Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –†–ú

–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1]
2. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2]
3. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3]
4. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 4]

–¢–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{trans}"""

        return self._send_request(prompt)

    def _send_request(self, prompt):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API"""
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json'
        }

        payload = {
            "model": "GigaChat",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,
            "top_p": 0.9,
            "n": 1,
            "stream": False,
            "max_tokens": 1500,
            "repetition_penalty": 1.0
        }

        response = requests.post(self.api_chat_url, headers=headers, json=payload, verify=False)
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content']
        else:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á–∏: {response.status_code} - {response.text}"

    def analyze_meeting_with_file(self, file_path=None, user_id=None):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á–∏ —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)"""
        # –ï—Å–ª–∏ file_path –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –∏—â–µ–º trans.docx –≤ temp_files/{user_id}/trans.docx
        if file_path is None:
            if user_id is None:
                return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ user_id."
            file_path = f"temp_files/{user_id}/trans.docx"
        if not self.is_token_valid() and not self.get_access_token():
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"

        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            trans = self.read_docx(file_path)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ (–º–∞–∫—Å–∏–º—É–º 6000 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(trans) > 6000:
            trans = trans[:6000] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞]"

        # –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        competency_report = ""
        try:
            if os.path.exists('REPORT.txt'):
                with open('REPORT.txt', 'r', encoding='utf-8') as f:
                    full_report = f.read()
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤)
                    if len(full_report) > 3000:
                        competency_report = full_report[:3000] + "\n\n[–û—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞]"
                    else:
                        competency_report = full_report
            else:
                return "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª REPORT.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {str(e)}"

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏ –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º, –∑–∞—Ç–µ–º —Å—Ñ–æ—Ä–º–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

# –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ê–ó–í–ò–¢–ò–Æ

## –ê–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π

[–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å—Ç—Ä–µ—á–∏, –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]

## –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–Ø–ú

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:

1. **[–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏]** - [–ë–∞–ª–ª/10]
   - üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** [–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è]
   - üìö **–ö—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**
     - [–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ 1] - [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞]
     - [–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ 2] - [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞]
   - üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
     - [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1]
     - [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2]
   - üéØ **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** [–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–≤–∏—Ç–∏—è]

2. **[–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏]** - [–ë–∞–ª–ª/10]
   - üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** [–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è]
   - üìö **–ö—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**
     - [–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ 1] - [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞]
     - [–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ 2] - [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞]
   - üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
     - [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1]
     - [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2]
   - üéØ **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** [–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–≤–∏—Ç–∏—è]

## –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–°–¢–†–ï–ß–ï

### –ß—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á:

1. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Å—Ç—Ä–µ—á–∏]
2. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏]
3. [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]

## –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø –ù–ê –ë–õ–ò–ñ–ê–ô–®–ò–ô –ú–ï–°–Ø–¶

### –ù–µ–¥–µ–ª—è 1: [–§–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é]
- [–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è]
- [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è]

### –ù–µ–¥–µ–ª—è 2: [–§–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é]
- [–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è]
- [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è]

---

–¢–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏:
{trans}

–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º:
{competency_report}
"""

        return self._send_request(prompt)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    AUTH_KEY = 'ZGMzMGJmZjEtODQwYS00ZjAwLWI2NjgtNGIyNGNiY2ViNmE1OjYwNjM3NTU0LWQxMDctNDA5ZS1hZWM3LTAwYjQ5MjZkOGU2OA=='
    SCOPE = 'GIGACHAT_API_PERS'
    API_AUTH_URL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth'
    API_CHAT_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions'

    analyzer = MeetingAnalyzer(AUTH_KEY, SCOPE, API_AUTH_URL, API_CHAT_URL)

    try:
        analysis_result = analyzer.analyze_meeting()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á–∏:")
        print(analysis_result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
        with open('meeting_analysis.txt', 'w', encoding='utf-8') as f:
            f.write(analysis_result)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª meeting_analysis.txt")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")