import pandas as pd
from docx import Document
import re
from difflib import SequenceMatcher

def load_transcript(path: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ .docx –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É."""
    doc = Document(path)
    return "\n".join(para.text for para in doc.paragraphs if para.text.strip())

def load_triggers(xlsx_path: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º."""
    df = pd.read_excel(xlsx_path, sheet_name='–õ–∏—Å—Ç1')
    df.columns = df.columns.str.strip()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
    df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è'] = df['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è'].ffill()
    df['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)'] = df['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)'].ffill()

    result = {}
    for (comp, indicator), group in df.groupby(['–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è', '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)']):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å –∏—Ö –±–∞–ª–ª–∞–º–∏
        pos_markers = {}
        neg_markers = {}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ (10, 8, 6, 4)
        for score in [10, 8, 6, 4]:
            col_name = f'–§—Ä–∞–∑—ã/–º–∞—Ä–∫–µ—Ä—ã "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è" {score}'
            if col_name in group.columns:
                markers = group[col_name].dropna().astype(str).str.strip()
                for marker in markers:
                    if marker and marker != 'nan':
                        pos_markers[marker] = score

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ (10, 8, 6, 4, 2)
        for score in [10, 8, 6, 4, 2]:
            col_name = f'–§—Ä–∞–∑—ã/–º–∞—Ä–∫–µ—Ä—ã "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è" {score}'
            if col_name in group.columns:
                markers = group[col_name].dropna().astype(str).str.strip()
                for marker in markers:
                    if marker and marker != 'nan':
                        neg_markers[marker] = score

        if comp not in result:
            result[comp] = {}

        result[comp][indicator] = {
            "positive_markers": pos_markers,
            "negative_markers": neg_markers
        }
    return result

def preprocess_text_simple(text: str) -> list:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    sentences = re.split(r'[.!?]+', text)
    return [s.strip() for s in sentences if s.strip() and len(s.strip()) > 10]

def diagnose_scoring_algorithm():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤"""
    
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ê –ü–û–î–°–ß–ï–¢–ê –ë–ê–õ–õ–û–í ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    text = load_transcript('trans.docx')
    triggers = load_triggers('triggers.xlsx')
    sentences = preprocess_text_simple(text)
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(sentences)}")
    print(f"üìä –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {len(triggers)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±–æ–π –∏ –∂–∏–∑–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å"
    problem_comp = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±–æ–π –∏ –∂–∏–∑–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å"
    
    if problem_comp in triggers:
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–û–ô –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ò: {problem_comp}")
        comp_data = triggers[problem_comp]
        
        for indicator, data in comp_data.items():
            print(f"\n--- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator} ---")
            
            pos_markers = data['positive_markers']
            neg_markers = data['negative_markers']
            
            print(f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {len(pos_markers)}")
            print(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {len(neg_markers)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–ª—ã
            if pos_markers:
                pos_scores = list(pos_markers.values())
                print(f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –±–∞–ª–ª—ã: {pos_scores}")
                print(f"–ú–∞–∫—Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π: {max(pos_scores)}")
            
            if neg_markers:
                neg_scores = list(neg_markers.values())
                print(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –±–∞–ª–ª—ã: {neg_scores}")
                print(f"–ú–∞–∫—Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π: {max(neg_scores)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if any(score > 100 for score in neg_scores):
                    print("‚ùå –ê–ù–û–ú–ê–õ–ò–Ø: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –±–∞–ª–ª—ã –±–æ–ª—å—à–µ 100!")
                
                total_neg_weight = sum(neg_scores)
                print(f"–û–±—â–∏–π –≤–µ—Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {total_neg_weight}")
                
                if total_neg_weight > 1000:
                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤!")
            
            # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            max_pos = max(pos_markers.values()) if pos_markers else 0
            max_neg = max(neg_markers.values()) if neg_markers else 0
            max_score = max_pos + max_neg
            
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {max_pos} + {max_neg} = {max_score}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            if neg_markers:
                # –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –Ω–∞—à–ª–∏ –º–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                sim_neg_total = sum(score * 0.3 for score in neg_markers.values())  # 30% —Å—Ö–æ–¥—Å—Ç–≤–æ
                sim_percentage = (-sim_neg_total / max_score * 100) if max_score > 0 else 0
                
                print(f"–°–∏–º—É–ª—è—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–∞:")
                print(f"  –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–ª–æ–≤: -{sim_neg_total:.1f}")
                print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç: {sim_percentage:.1f}%")
                
                if sim_percentage < -500:
                    print("‚ùå –í–û–¢ –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´! –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ!")
            
            print("-" * 80)

if __name__ == "__main__":
    diagnose_scoring_algorithm() 