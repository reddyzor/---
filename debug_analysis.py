import asyncio
from search import load_transcript, load_triggers, preprocess_text, AsyncGigaChat
from difflib import SequenceMatcher

async def debug_analysis():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    
    print("=== –û–¢–õ–ê–î–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    text = load_transcript('trans.docx')
    triggers = load_triggers('triggers.xlsx')
    sentences = preprocess_text(text)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(sentences)}")
    print(f"‚úÖ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {len(triggers)}")
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤
    total_markers = 0
    for comp_data in triggers.values():
        for ind_data in comp_data.values():
            total_markers += len(ind_data['positive_markers']) + len(ind_data['negative_markers'])
    
    print(f"‚úÖ –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {total_markers}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat
    print(f"\nü§ñ –¢–ï–°–¢ GIGACHAT API:")
    try:
        giga_chat = AsyncGigaChat()
        await giga_chat.initialize()
        print(f"‚úÖ GigaChat —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_response = await giga_chat.send("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        print(f"‚úÖ –¢–µ—Å—Ç-–æ—Ç–≤–µ—Ç: {test_response[:50]}...")
        
        await giga_chat.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {e}")
        print(f"üîß –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ SequenceMatcher")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ GigaChat
    print(f"\nüß™ –ê–ù–ê–õ–ò–ó –ë–ï–ó GIGACHAT (—Ç–æ–ª—å–∫–æ SequenceMatcher):")
    
    FALLBACK_THRESHOLD = 0.1  # –ü–æ—Ä–æ–≥ –¥–ª—è SequenceMatcher
    found_matches = 0
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    first_comp = list(triggers.keys())[0]
    first_indicator = list(triggers[first_comp].keys())[0]
    pos_markers = triggers[first_comp][first_indicator]['positive_markers']
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {first_comp} -> {first_indicator}")
    print(f"üìä –ú–∞—Ä–∫–µ—Ä–æ–≤: {len(pos_markers)}")
    
    best_matches = []
    
    for sent in sentences[:20]:  # –ü–µ—Ä–≤—ã–µ 20 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        for marker, score in list(pos_markers.items())[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –º–∞—Ä–∫–µ—Ä–∞
            similarity = SequenceMatcher(None, sent.lower(), marker.lower()).ratio()
            
            if similarity >= FALLBACK_THRESHOLD:
                found_matches += 1
                weighted_score = score * similarity
                best_matches.append({
                    "sentence": sent,
                    "marker": marker,
                    "similarity": similarity,
                    "score": weighted_score,
                    "original_score": score
                })
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {found_matches}")
    
    if best_matches:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
        best_matches.sort(key=lambda x: x['similarity'], reverse=True)
        
        print(f"\nüèÜ –¢–û–ü-3 –°–û–í–ü–ê–î–ï–ù–ò–Ø:")
        for i, match in enumerate(best_matches[:3]):
            print(f"\n{i+1}. –°—Ö–æ–¥—Å—Ç–≤–æ: {match['similarity']:.3f} ({match['similarity']*100:.1f}%)")
            print(f"   –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –±–∞–ª–ª: {match['score']:.2f} –∏–∑ {match['original_score']}")
            print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {match['sentence'][:80]}...")
            print(f"   –ú–∞—Ä–∫–µ—Ä: {match['marker'][:80]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í:")
    total_text_length = sum(len(sent) + len(marker) for sent in sentences[:10] 
                           for marker in list(pos_markers.keys())[:3])
    
    print(f"üìä –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_text_length} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìä –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–∫—Ä–∏–ø—Ç–µ: 2000")
    print(f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {'–î–∞' if total_text_length > 2000 else '–ù–µ—Ç'}")

if __name__ == "__main__":
    asyncio.run(debug_analysis())